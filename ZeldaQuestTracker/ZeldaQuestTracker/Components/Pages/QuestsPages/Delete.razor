@page "/quests/delete"
@inject ZeldaQuestTracker.Data.ZeldaQuestTrackerContext DB
@using ZeldaQuestTracker.Components.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Quests</h4>
    <hr />
    @if (quests is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@quests.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Walkthrough Link</dt>
            <dd class="col-sm-10">@quests.Walkthrough</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Video Link</dt>
            <dd class="col-sm-10">@quests.Video</dd>
        </dl>
        <EditForm method="post" Model="quests" OnValidSubmit="DeleteQuests" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(quests is null)">Delete</button> |
            <a href="/quests">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Quests? quests;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        quests = await DB.Quests.FirstOrDefaultAsync(m => m.Id == Id);

        if (quests is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteQuests()
    {
        DB.Quests.Remove(quests!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/quests");
    }
}
